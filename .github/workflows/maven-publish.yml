# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Build with Allure

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "30 12 * * *"   # Every day at 6 PM IST (12:30 UTC)

  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run workflow from"
        required: true
        default: "main"
      environment:
        description: "Target environment (uat, preprod, prod)"
        required: true
        default: "QA"
      browser:
        description: "Browser to use (chrome, firefox, edge)"
        required: true
        default: "chrome"
      tags:
        description: "Cucumber/TestNG tags to run"
        required: false
        default: "@regression"
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Run Maven tests
      - name: Run Tests with Maven
        run: |
          mvn clean test \
            -Denv=${{ github.event.inputs.environment }} \
            -Dbrowser=${{ github.event.inputs.browser }} \
            -Dcucumber.filter.tags="${{ github.event.inputs.tags }}" || true

      # Step 4: Upload Allure results as an artifact
      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: target/allure-results

      # Step 5: Install Allure CLI
      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.29.0/allure-2.29.0.zip
          unzip allure-2.29.0.zip -d /opt/
          export PATH="/opt/allure-2.29.0/bin:$PATH"
          echo "/opt/allure-2.29.0/bin" >> $GITHUB_PATH

      # Step 6: Generate Allure Report
      - name: Generate Allure Report
        if: always()
        run: allure generate target/allure-results -o target/allure-report --clean

      # Step 7: Upload Allure Report as artifact
      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report
      # Step 8: Allure Report link on github pages
      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: success() || failure()   # Publish even if tests fail
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report
          keep_files: false
      # Step 9: Allure Report link on workflow
      - name: Add Allure Report link to summary
        if: always()
        run: echo "ðŸ”— [View Allure Report](https://abharish480.github.io/BankAPIDemo_RestAssured/)" >> $GITHUB_STEP_SUMMARY
